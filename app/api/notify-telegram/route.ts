// app/api/notify-telegram/route.ts
import { NextResponse } from "next/server";

// –í—Å–µ–≥–¥–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –±–µ–∑ –∫—ç—à–∞
export const dynamic = "force-dynamic";
export const revalidate = 0;

function trimStr(v: unknown, max = 800) {
  if (typeof v !== "string") return "";
  const s = v.trim();
  return s.length > max ? s.slice(0, max) + "‚Ä¶" : s;
}

export async function POST(req: Request) {
  try {
    const { kind, idea, email } = await req.json();

    const token = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;
    if (!token || !chatId) {
      return NextResponse.json(
        { error: "Missing TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID" },
        { status: 500 }
      );
    }

    const cleanIdea = trimStr(idea);
    const cleanEmail = trimStr(email, 256);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º 2 –≤–∏–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    // 1) –ø–µ—Ä–≤–∏—á–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ)
    // 2) –≤—Ç–æ—Ä–∏—á–Ω–æ–µ (–¥–æ–±–∞–≤–ª–µ–Ω email)
    let lines: string[] = [];

    if (kind === "email" && cleanEmail) {
      // –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
      lines = [
        "‚ú® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ä¢ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
        `üìß Email: ${cleanEmail}`,
        cleanIdea ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanIdea}` : undefined,
      ].filter(Boolean) as string[];
    } else {
      // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥
      lines = [
        "‚ú® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ä¢ –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥",
        cleanIdea ? `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${cleanIdea}` : "üìù –û–ø–∏—Å–∞–Ω–∏–µ: ‚Äî",
      ];
    }

    const text = lines.join("\n");

    const tgUrl = `https://api.telegram.org/bot${token}/sendMessage`;
    const tgRes = await fetch(tgUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      // –ë–µ–∑ Markdown/HTML ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π plain text
      body: JSON.stringify({ chat_id: chatId, text }),
      cache: "no-store",
    });

    if (!tgRes.ok) {
      const err = await tgRes.text();
      return NextResponse.json({ error: `Telegram error: ${err}` }, { status: 502 });
    }

    return NextResponse.json({ ok: true });
  } catch (e: any) {
    return NextResponse.json({ error: e?.message || "Bad request" }, { status: 400 });
  }
}
